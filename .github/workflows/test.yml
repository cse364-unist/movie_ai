name: Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      DEBIAN_FRONTEND: noninteractive

    services:
      mongodb:
        image: mongo:4.4.6
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: admin
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-venv python3-pip gnupg
        python -m venv movie_env
        source movie_env/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage

    - name: Install MongoDB tools
      run: |
        wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
        sudo apt-get update
        sudo apt-get install -y mongodb-org-tools

    - name: Install mongosh
      run: |
        wget -qO- https://www.mongodb.org/static/pgp/server-7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh
        mongosh --version

    - name: Wait for MongoDB to be ready
      run: |
        for i in {1..30}; do
          if mongosh --host localhost:27017 -u admin -p admin --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 })'; then
            echo "MongoDB is ready!"
            break
          fi
          echo "Waiting for MongoDB to start..."
          sleep 5
        done

    - name: Import MongoDB data
      run: |
        mongoimport --db moviedb --collection scenes --file data/scenes.json --type json --authenticationDatabase admin --username admin --password admin

    - name: Run tests with coverage
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        source movie_env/bin/activate
        cd movie_ai
        coverage run --branch --source='.' manage.py test movieapi
